!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/refat/.config/nvim/plug-config/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
$FZF_DEFAULT_COMMAND	fzf.vim	/^let $FZF_DEFAULT_COMMAND="rg --files --hidden"$/;"	v
$FZF_DEFAULT_OPTS	fzf.vim	/^let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'$/;"	v
<C-b>	coc-config.vim	/^inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(0)\\<cr>" : "\\/;"	m
<C-b>	coc-config.vim	/^nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\\<C-b>"$/;"	m
<C-f>	coc-config.vim	/^inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(1)\\<cr>" : "\\/;"	m
<C-f>	coc-config.vim	/^nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\\<C-f>"$/;"	m
<C-f>	fzf.vim	/^map <C-f> :Files<CR>$/;"	m
<C-j>	coc-config.vim	/^imap <C-j> <Plug>(coc-snippets-expand-jump)$/;"	m
<C-j>	coc-config.vim	/^vmap <C-j> <Plug>(coc-snippets-select)$/;"	m
<C-l>	coc-config.vim	/^imap <C-l> <Plug>(coc-snippets-expand)$/;"	m
<C-s>	coc-config.vim	/^nmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m
<C-s>	coc-config.vim	/^xmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m
<S-TAB>	coc-config.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	coc-config.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<c-@>	coc-config.vim	/^  inoremap <silent><expr> <c-@> coc#refresh()$/;"	m
<c-space>	coc-config.vim	/^  inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	coc-config.vim	/^inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()$/;"	m
<leader>a	coc-config.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	coc-config.vim	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	coc-config.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>b	fzf.vim	/^map <leader>b :Buffers<CR>$/;"	m
<leader>f	coc-config.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>f	coc-config.vim	/^xmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>fb	telescope.vim	/^nnoremap <leader>fb <cmd>Telescope buffers<cr>$/;"	m
<leader>ff	rnvimr.vim	/^nmap <leader>ff :RnvimrToggle<CR>$/;"	m
<leader>fg	telescope.vim	/^nnoremap <leader>fg <cmd>Telescope live_grep<cr>$/;"	m
<leader>fh	telescope.vim	/^nnoremap <leader>fh <cmd>Telescope help_tags<cr>$/;"	m
<leader>g	fzf.vim	/^nnoremap <leader>g :Rg<CR>$/;"	m
<leader>m	fzf.vim	/^nnoremap <leader>m :Marks<CR>$/;"	m
<leader>qf	coc-config.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	coc-config.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>t	fzf.vim	/^nnoremap <leader>t :Tags<CR>$/;"	m
<space>a	coc-config.vim	/^nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	coc-config.vim	/^nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	coc-config.vim	/^nmap <space>e :CocCommand explorer<CR>$/;"	m
<space>f	coc-config.vim	/^nmap <space>f :CocCommand explorer --preset floating<CR>$/;"	m
<space>j	coc-config.vim	/^nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	coc-config.vim	/^nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>o	coc-config.vim	/^nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	coc-config.vim	/^nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>s	coc-config.vim	/^nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
Files	fzf.vim	/^command! -bang -nargs=? -complete=dir Files$/;"	c
Fold	coc-config.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	coc-config.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
GGrep	fzf.vim	/^command! -bang -nargs=* GGrep$/;"	c
K	coc-config.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
OR	coc-config.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
RG	fzf.vim	/^command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)$/;"	c
Rg	fzf.vim	/^command! -bang -nargs=* Rg$/;"	c
RipgrepFzf	fzf.vim	/^function! RipgrepFzf(query, fullscreen)$/;"	f
[g	coc-config.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	coc-config.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
ac	coc-config.vim	/^omap ac <Plug>(coc-classobj-a)$/;"	m
ac	coc-config.vim	/^xmap ac <Plug>(coc-classobj-a)$/;"	m
af	coc-config.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
af	coc-config.vim	/^xmap af <Plug>(coc-funcobj-a)$/;"	m
bg_current	barbar.vim	/^let bg_current = get(nvim_get_hl_by_name('Normal',     1), 'background', '#000000')$/;"	v
bg_inactive	barbar.vim	/^let bg_inactive = get(nvim_get_hl_by_name('TabLine',   1), 'background', '#000000')$/;"	v
bg_visible	barbar.vim	/^let bg_visible = get(nvim_get_hl_by_name('TabLineSel', 1), 'background', '#000000')$/;"	v
bufferline	barbar.vim	/^let bufferline = {}$/;"	v
bufferline	barbar.vim	/^let bufferline.clickable = v:true$/;"	v
bufferline	barbar.vim	/^let bufferline.icons = v:true$/;"	v
bufferline	barbar.vim	/^let bufferline.letters =$/;"	v
bufferline	barbar.vim	/^let bufferline.semantic_letters = v:true$/;"	v
bufferline	barbar.vim	/^let bufferline.shadow = v:true$/;"	v
g:NERDCompactSexyComs	nerdcomment.vim	/^let g:NERDCompactSexyComs = 1$/;"	v
g:NERDCreateDefaultMappings	nerdcomment.vim	/^let g:NERDCreateDefaultMappings = 1$/;"	v
g:NERDDefaultAlign	nerdcomment.vim	/^let g:NERDDefaultAlign = 'left'$/;"	v
g:NERDSpaceDelims	nerdcomment.vim	/^let g:NERDSpaceDelims = 1$/;"	v
g:NERDToggleCheckAllLines	nerdcomment.vim	/^let g:NERDToggleCheckAllLines = 1$/;"	v
g:NERDTrimTrailingWhitespace	nerdcomment.vim	/^let g:NERDTrimTrailingWhitespace = 1$/;"	v
g:airline#extensions#branch#enabled	airline.vim	/^let g:airline#extensions#branch#enabled=1$/;"	v
g:airline#extensions#hunks#enabled	airline.vim	/^let g:airline#extensions#hunks#enabled=1$/;"	v
g:airline_mode_map	airline.vim	/^let g:airline_mode_map = {$/;"	v
g:airline_powerline_fonts	airline.vim	/^let g:airline_powerline_fonts=1$/;"	v
g:airline_theme	airline.vim	/^let g:airline_theme='nord'$/;"	v
g:coc_explorer_global_presets	coc-config.vim	/^let g:coc_explorer_global_presets = {$/;"	v
g:coc_snippet_next	coc-config.vim	/^let g:coc_snippet_next = '<c-j>'$/;"	v
g:coc_snippet_prev	coc-config.vim	/^let g:coc_snippet_prev = '<c-k>'$/;"	v
g:fzf_action	fzf.vim	/^let g:fzf_action = {$/;"	v
g:fzf_colors	fzf.vim	/^let g:fzf_colors =$/;"	v
g:fzf_history_dir	fzf.vim	/^let g:fzf_history_dir = '~\/.local\/share\/fzf-history'$/;"	v
g:fzf_layout	fzf.vim	/^let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset'/;"	v
g:fzf_tags_command	fzf.vim	/^let g:fzf_tags_command = 'ctags -R'$/;"	v
g:gitgutter_enabled	gitgutter.vim	/^let g:gitgutter_enabled = 1$/;"	v
g:gitgutter_preview_win_floating	gitgutter.vim	/^let g:gitgutter_preview_win_floating = 1$/;"	v
g:gitgutter_sign_added	gitgutter.vim	/^let g:gitgutter_sign_added              = '▎'$/;"	v
g:gitgutter_sign_modified	gitgutter.vim	/^let g:gitgutter_sign_modified           = '▎'$/;"	v
g:gitgutter_sign_modified_removed	gitgutter.vim	/^let g:gitgutter_sign_modified_removed   = '▎'$/;"	v
g:gitgutter_sign_removed	gitgutter.vim	/^let g:gitgutter_sign_removed            = '契'$/;"	v
g:gitgutter_sign_removed_first_line	gitgutter.vim	/^let g:gitgutter_sign_removed_first_line = '契'$/;"	v
g:gruvbox_material_background	gruvbox.vim	/^let g:gruvbox_material_background = 'soft'$/;"	v
g:gruvbox_material_better_performance	gruvbox.vim	/^let g:gruvbox_material_better_performance = !has("win32")$/;"	v
g:gruvbox_material_better_performance	gruvbox.vim	/^let g:gruvbox_material_better_performance = 1$/;"	v
g:gruvbox_material_diagnostic_line_highlight	gruvbox.vim	/^let g:gruvbox_material_diagnostic_line_highlight = 1$/;"	v
g:gruvbox_material_diagnostic_text_highlight	gruvbox.vim	/^let g:gruvbox_material_diagnostic_text_highlight = 1$/;"	v
g:gruvbox_material_enable_bold	gruvbox.vim	/^let g:gruvbox_material_enable_bold = 1$/;"	v
g:gruvbox_material_enable_italic	gruvbox.vim	/^let g:gruvbox_material_enable_italic = 1$/;"	v
g:gruvbox_material_palette	gruvbox.vim	/^let g:gruvbox_material_palette = 'material'$/;"	v
g:gruvbox_material_sign_column_background	gruvbox.vim	/^let g:gruvbox_material_sign_column_background = 'none'$/;"	v
g:gruvbox_material_statusline_style	gruvbox.vim	/^let g:gruvbox_material_statusline_style = "default"$/;"	v
g:gruvbox_material_transparent_background	gruvbox.vim	/^let g:gruvbox_material_transparent_background = 0$/;"	v
g:gruvbox_material_visual	gruvbox.vim	/^let g:gruvbox_material_visual = 'grey background'$/;"	v
g:livedown_browser	htmlpreview.vim	/^let g:livedown_browser = "brave"$/;"	v
g:livedown_port	htmlpreview.vim	/^let g:livedown_port = 1008$/;"	v
g:mkdp_auto_close	markdown.vim	/^let g:mkdp_auto_close = 1$/;"	v
g:mkdp_auto_start	markdown.vim	/^let g:mkdp_auto_start = 0$/;"	v
g:mkdp_browser	markdown.vim	/^let g:mkdp_browser = ''$/;"	v
g:mkdp_browserfunc	markdown.vim	/^let g:mkdp_browserfunc = ''$/;"	v
g:mkdp_command_for_global	markdown.vim	/^let g:mkdp_command_for_global = 0$/;"	v
g:mkdp_echo_preview_url	markdown.vim	/^let g:mkdp_echo_preview_url = 0$/;"	v
g:mkdp_filetypes	markdown.vim	/^let g:mkdp_filetypes = ['markdown']$/;"	v
g:mkdp_highlight_css	markdown.vim	/^let g:mkdp_highlight_css = ''$/;"	v
g:mkdp_markdown_css	markdown.vim	/^let g:mkdp_markdown_css = ''$/;"	v
g:mkdp_open_ip	markdown.vim	/^let g:mkdp_open_ip = ''$/;"	v
g:mkdp_open_to_the_world	markdown.vim	/^let g:mkdp_open_to_the_world = 0$/;"	v
g:mkdp_page_title	markdown.vim	/^let g:mkdp_page_title = '「${name}」'$/;"	v
g:mkdp_port	markdown.vim	/^let g:mkdp_port = ''$/;"	v
g:mkdp_preview_options	markdown.vim	/^let g:mkdp_preview_options = {$/;"	v
g:mkdp_refresh_slow	markdown.vim	/^let g:mkdp_refresh_slow = 0$/;"	v
g:nord_bold	nord.vim	/^let g:nord_bold = 1$/;"	v
g:nord_italic	nord.vim	/^let g:nord_italic = 1$/;"	v
g:nord_italic_comments	nord.vim	/^let g:nord_italic_comments = 1$/;"	v
g:nord_underline	nord.vim	/^let g:nord_underline = 1$/;"	v
g:nord_uniform_diff_background	nord.vim	/^let g:nord_uniform_diff_background = 1$/;"	v
g:nord_uniform_status_lines	nord.vim	/^let g:nord_uniform_status_lines = 1$/;"	v
g:one_allow_italics	one.vim	/^let g:one_allow_italics = 1$/;"	v
g:rnvimr_bw_enable	rnvimr.vim	/^let g:rnvimr_bw_enable = 1$/;"	v
g:rnvimr_draw_border	rnvimr.vim	/^let g:rnvimr_draw_border = 1$/;"	v
g:rnvimr_layout	rnvimr.vim	/^let g:rnvimr_layout = { 'relative': 'editor',$/;"	v
g:rnvimr_pick_enable	rnvimr.vim	/^let g:rnvimr_pick_enable = 1$/;"	v
g:rnvimr_ranger_cmd	rnvimr.vim	/^let g:rnvimr_ranger_cmd = 'ranger --cmd="set draw_borders separators"'$/;"	v
g:startify_bookmarks	startify.vim	/^let g:startify_bookmarks = [$/;"	v
g:startify_change_to_vcs_root	startify.vim	/^let g:startify_change_to_vcs_root = 1$/;"	v
g:startify_custom_header	startify.vim	/^let g:startify_custom_header = [$/;"	v
g:startify_enable_special	startify.vim	/^let g:startify_enable_special = 0$/;"	v
g:startify_fortune_use_unicode	startify.vim	/^let g:startify_fortune_use_unicode = 1$/;"	v
g:startify_lists	startify.vim	/^let g:startify_lists = [$/;"	v
g:startify_session_autoload	startify.vim	/^let g:startify_session_autoload = 1$/;"	v
g:startify_session_delete_buffers	startify.vim	/^let g:startify_session_delete_buffers = 1$/;"	v
g:startify_session_dir	startify.vim	/^let g:startify_session_dir = '~\/.config\/nvim\/session'$/;"	v
g:startify_session_persistence	startify.vim	/^let g:startify_session_persistence = 1$/;"	v
g:tex_conceal	vimtex.vim	/^let g:tex_conceal='abdmg'$/;"	v
g:tex_flavor	vimtex.vim	/^let g:tex_flavor='latex'$/;"	v
g:vim_markdown_folding_disabled	markdown.vim	/^let g:vim_markdown_folding_disabled = 1$/;"	v
g:vim_markdown_frontmatter	markdown.vim	/^let g:vim_markdown_frontmatter = 1$/;"	v
g:vim_markdown_math	markdown.vim	/^let g:vim_markdown_math = 1$/;"	v
g:vim_markdown_strikethrough	markdown.vim	/^let g:vim_markdown_strikethrough = 1$/;"	v
g:vim_markdown_toc_autofit	markdown.vim	/^let g:vim_markdown_toc_autofit = 1$/;"	v
g:vimtex_compiler_latexmk	vimtex.vim	/^let g:vimtex_compiler_latexmk = {$/;"	v
g:vimtex_quickfix_mode	vimtex.vim	/^let g:vimtex_quickfix_mode=0$/;"	v
g:vimtex_view_method	vimtex.vim	/^let g:vimtex_view_method='zathura'$/;"	v
gd	coc-config.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	coc-config.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	coc-config.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	coc-config.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
ic	coc-config.vim	/^omap ic <Plug>(coc-classobj-i)$/;"	m
ic	coc-config.vim	/^xmap ic <Plug>(coc-classobj-i)$/;"	m
if	coc-config.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
if	coc-config.vim	/^xmap if <Plug>(coc-funcobj-i)$/;"	m
mygroup	coc-config.vim	/^augroup mygroup$/;"	a
s:check_back_space	coc-config.vim	/^function! s:check_back_space() abort$/;"	f
s:gitModified	startify.vim	/^function! s:gitModified()$/;"	f
s:gitUntracked	startify.vim	/^function! s:gitUntracked()$/;"	f
s:show_documentation	coc-config.vim	/^function! s:show_documentation()$/;"	f
